#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Dec 23 16:47:41 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set worldsize [lindex $argv 0]
set worldtype [lindex $argv 1]
set worldname [lindex $argv 2]
set worldseed [lindex $argv 3]
set playerc [lindex $argv 4]
set port [lindex $argv 5]
set portforward [lindex $argv 6]
set password [lindex $argv 7]

if {$worldseed == "Random"} {
	set worldseed ""
}
if {$password == "none"} {
	set password ""
}

set worldname "terraria_$worldname"

if { $worldsize == "Small" } {
	set worldsize 1
} elseif { $worldsize == "Medium" } {
	set worldsize 2
} elseif { $worldsize == "Large" } {
	set worldsize 3
} else {
	exit 1
}

if { $worldtype == "Classic" } {
	set worldtype 1
} elseif { $worldtype == "Expert" } {
	set worldtype 2
} elseif { $worldtype == "Master" } {
	set worldtype 3
} elseif { $worldtype == "Journey" } {
	set worldtype 4
} else {
	exit 1
}

if { $worldname == "" } {
	exit 1
}

puts "Making world with size $worldsize 
diff $worldtype 
name $worldname 
seed $worldseed (blank for random)
maxplayers $playerc
port $port
portforward? $portforward
password $password
"

set timeout -1
spawn docker run --rm -it --name=maketerrariaworld -v $HOME/config-docker/terraria:/config beardedio/terraria
match_max 100000
expect -exact "\[?1h=\[6n"
send -- "\[35;1R"
expect -exact "Choose World: \[6n"
send -- "\[35;15Rn\r"
expect -exact "Choose size: \[6n"
send -- "\[7;14R$worldsize\r"
expect -exact "Choose difficulty: \[6n"
send -- "\[8;20R$worldtype\r"
expect -exact "Enter world name: \[6n"
send -- "\[3;19R$worldname\r"
expect -exact "Enter Seed (Leave Blank For Random):\[6n"
send -- "\[3;37R$worldseed\r"
expect -exact "Choose World: \[6n"
send -- "\[35;15R1\r"
expect -exact "Max players (press enter for 16): \[6n"
send -- "\[3;35R$playerc\r"
expect -exact "Server port (press enter for 7777): \[6n"
send -- "\[3;37R$port\r"
expect -exact "Automatically forward port? (y/n): \[6n"
send -- "\[3;36R$portforward\r"
expect -exact "Server password (press enter for none): \[6n"
send -- "\[3;41R$password\r"
expect -exact "\]0;Terraria Server: .*: \[6n"
send -- "\[6;3R"
expect -exact ""
send -- "exit\r"
expect eof
